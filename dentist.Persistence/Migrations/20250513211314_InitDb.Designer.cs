// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dentist.Persistence.Context;

#nullable disable

namespace dentist.Persistence.Migrations
{
    [DbContext(typeof(DentistContext))]
    [Migration("20250513211314_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dentist.domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "0d152edd-1b37-448f-a444-40df8967c73e",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "ed107a72-6fdf-49b9-9c3b-fd51f2b0a290",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("dentist.domain.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("dentist.domain.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Title");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 606, DateTimeKind.Local).AddTicks(1135),
                            IsDeleted = false,
                            Name = "Dekan"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 607, DateTimeKind.Local).AddTicks(4704),
                            IsDeleted = false,
                            Name = "Dekan Yardımcısı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 607, DateTimeKind.Local).AddTicks(4713),
                            IsDeleted = false,
                            Name = "Bölüm Başkanı"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 607, DateTimeKind.Local).AddTicks(4714),
                            IsDeleted = false,
                            Name = "Profesör"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 607, DateTimeKind.Local).AddTicks(4715),
                            IsDeleted = false,
                            Name = "Doçent"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 607, DateTimeKind.Local).AddTicks(4716),
                            IsDeleted = false,
                            Name = "Doktor"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 607, DateTimeKind.Local).AddTicks(4716),
                            IsDeleted = false,
                            Name = "Araştırma Görevlisi"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 607, DateTimeKind.Local).AddTicks(4717),
                            IsDeleted = false,
                            Name = "Yazılımcı"
                        });
                });

            modelBuilder.Entity("dentist.domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dfa31ab-b6cd-4d7c-8703-674c24e1cfae",
                            CreatedBy = "Sistem",
                            CreatedDate = new DateTime(2025, 5, 14, 0, 13, 13, 608, DateTimeKind.Local).AddTicks(3124),
                            Email = "stoy@windowslive.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            Name = "Serkan",
                            NormalizedEmail = "STOY@WINDOWSLIVE.COM",
                            NormalizedUserName = "STOY",
                            PasswordHash = "AQAAAAIAAYagAAAAELfJTaCn5FS0SL3Jt0pp7cyYIGD2pa4Ya6aj6xk1mQ+KrRP6qcYMW95DOERU9u/XQQ==",
                            PhoneNumber = "0522 698 56 98",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98f8db1b-4ee7-447a-ba4e-5e0fb81da261",
                            SurName = "TOY",
                            TwoFactorEnabled = false,
                            UserName = "stoy"
                        });
                });

            modelBuilder.Entity("dentist.domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("dentist.domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("dentist.domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Expired")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            Expired = false
                        });
                });

            modelBuilder.Entity("dentist.domain.Entities.UserTitle", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "TitleId");

                    b.ToTable("UserTitle");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TitleId = 8,
                            StartDate = new DateTime(2025, 5, 14, 0, 13, 13, 656, DateTimeKind.Local).AddTicks(7492)
                        });
                });

            modelBuilder.Entity("dentist.domain.Entities.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("dentist.domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("dentist.domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dentist.domain.Entities.UserClaim", b =>
                {
                    b.HasOne("dentist.domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dentist.domain.Entities.UserLogin", b =>
                {
                    b.HasOne("dentist.domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dentist.domain.Entities.UserRole", b =>
                {
                    b.HasOne("dentist.domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentist.domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dentist.domain.Entities.UserTitle", b =>
                {
                    b.HasOne("dentist.domain.Entities.Title", "Title")
                        .WithMany("UserTitle")
                        .HasForeignKey("UserId");

                    b.HasOne("dentist.domain.Entities.User", "User")
                        .WithMany("UserTitle")
                        .HasForeignKey("UserId");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dentist.domain.Entities.UserToken", b =>
                {
                    b.HasOne("dentist.domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dentist.domain.Entities.Title", b =>
                {
                    b.Navigation("UserTitle");
                });

            modelBuilder.Entity("dentist.domain.Entities.User", b =>
                {
                    b.Navigation("UserTitle");
                });
#pragma warning restore 612, 618
        }
    }
}
